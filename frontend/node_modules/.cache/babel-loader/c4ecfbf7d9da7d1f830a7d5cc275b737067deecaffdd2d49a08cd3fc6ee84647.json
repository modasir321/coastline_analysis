{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\Coastline\\\\coastline_analysis\\\\frontend\\\\src\\\\MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, GeoJSON, ImageOverlay } from 'react-leaflet';\nimport axios from 'axios';\nimport DatePicker from './DatePicker';\nimport 'leaflet/dist/leaflet.css';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = () => {\n  _s();\n  const [mapData, setMapData] = useState({\n    baseline: null,\n    thumbnail: null,\n    waterMask: null,\n    bounds: null\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Load baseline on mount\n  useEffect(() => {\n    const loadBaseline = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/get-baseline');\n        setMapData(prev => ({\n          ...prev,\n          baseline: response.data\n        }));\n      } catch (error) {\n        console.error('Failed to load baseline:', error);\n        setError(\"Failed to load 2000 coastline data\");\n      }\n    };\n    loadBaseline();\n  }, []);\n  const handleAnalyze = async endDate => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.post('http://localhost:5000/get-analysis', {\n        end_date: endDate\n      });\n      setMapData(prev => ({\n        ...prev,\n        thumbnail: response.data.thumbnail,\n        waterMask: response.data.water_mask,\n        bounds: response.data.bounds\n      }));\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMsg = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || error.message || \"Analysis failed. Try dates between 2017-06-01 and today\";\n      setError(errorMsg);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      bounds: mapData.bounds // Auto-zoom to AOI\n      ,\n      style: {\n        height: '100vh',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 OpenStreetMap contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), mapData.baseline && /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: mapData.baseline,\n        style: {\n          color: '#ff0000',\n          weight: 3,\n          fillColor: '#ff0000',\n          fillOpacity: 0.1\n        },\n        onEachFeature: (feature, layer) => {\n          layer.bindTooltip(\"2000 Baseline Coastline\");\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this), mapData.thumbnail && mapData.bounds && /*#__PURE__*/_jsxDEV(ImageOverlay, {\n        url: mapData.thumbnail,\n        bounds: mapData.bounds,\n        opacity: 0.9\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this), mapData.waterMask && /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: mapData.waterMask,\n        style: {\n          color: '#0000ff',\n          weight: 2,\n          fillColor: '#0000ff',\n          fillOpacity: 0.3\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-panel\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Coastal Change Analysis\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n            onDateSelect: handleAnalyze\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 25\n          }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"loading-state\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"spinner\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 33\n            }, this), \"Analyzing Satellite Imagery...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 29\n          }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"error-state\",\n            children: [\"\\u26A0\\uFE0F \", error]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n_s(MapComponent, \"6s8XZextGSbjrF2liL4M77U1v2I=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","GeoJSON","ImageOverlay","axios","DatePicker","jsxDEV","_jsxDEV","MapComponent","_s","mapData","setMapData","baseline","thumbnail","waterMask","bounds","loading","setLoading","error","setError","loadBaseline","response","get","prev","data","console","handleAnalyze","endDate","post","end_date","water_mask","_error$response","_error$response$data","errorMsg","message","className","children","style","height","width","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","color","weight","fillColor","fillOpacity","onEachFeature","feature","layer","bindTooltip","opacity","onDateSelect","_c","$RefreshReg$"],"sources":["C:/Users/dell/Desktop/Coastline/coastline_analysis/frontend/src/MapComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { MapContainer, TileLayer, GeoJSON, ImageOverlay } from 'react-leaflet';\r\nimport axios from 'axios';\r\nimport DatePicker from './DatePicker';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport './styles.css';\r\n\r\nconst MapComponent = () => {\r\n    const [mapData, setMapData] = useState({\r\n        baseline: null,\r\n        thumbnail: null,\r\n        waterMask: null,\r\n        bounds: null\r\n    });\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    // Load baseline on mount\r\n    useEffect(() => {\r\n        const loadBaseline = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:5000/get-baseline');\r\n                setMapData(prev => ({\r\n                    ...prev,\r\n                    baseline: response.data\r\n                }));\r\n            } catch (error) {\r\n                console.error('Failed to load baseline:', error);\r\n                setError(\"Failed to load 2000 coastline data\");\r\n            }\r\n        };\r\n        loadBaseline();\r\n    }, []);\r\n\r\n    const handleAnalyze = async (endDate) => {\r\n        setLoading(true);\r\n        setError(null);\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/get-analysis', {\r\n                end_date: endDate\r\n            });\r\n\r\n            setMapData(prev => ({\r\n                ...prev,\r\n                thumbnail: response.data.thumbnail,\r\n                waterMask: response.data.water_mask,\r\n                bounds: response.data.bounds\r\n            }));\r\n\r\n        } catch (error) {\r\n            const errorMsg = error.response?.data?.error || \r\n                            error.message || \r\n                            \"Analysis failed. Try dates between 2017-06-01 and today\";\r\n            setError(errorMsg);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"map-container\">\r\n            <MapContainer \r\n                bounds={mapData.bounds}  // Auto-zoom to AOI\r\n                style={{ height: '100vh', width: '100%' }}\r\n            >\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; OpenStreetMap contributors'\r\n                />\r\n\r\n                {/* 2000 Baseline Coastline */}\r\n                {mapData.baseline && (\r\n                    <GeoJSON \r\n                        data={mapData.baseline}\r\n                        style={{\r\n                            color: '#ff0000',\r\n                            weight: 3,\r\n                            fillColor: '#ff0000',\r\n                            fillOpacity: 0.1\r\n                        }}\r\n                        onEachFeature={(feature, layer) => {\r\n                            layer.bindTooltip(\"2000 Baseline Coastline\");\r\n                        }}\r\n                    />\r\n                )}\r\n\r\n                {/* Satellite Imagery Overlay */}\r\n                {mapData.thumbnail && mapData.bounds && (\r\n                    <ImageOverlay \r\n                        url={mapData.thumbnail}\r\n                        bounds={mapData.bounds}\r\n                        opacity={0.9}\r\n                    />\r\n                )}\r\n\r\n                {/* Water Mask */}\r\n                {mapData.waterMask && (\r\n                    <GeoJSON \r\n                        data={mapData.waterMask}\r\n                        style={{\r\n                            color: '#0000ff',\r\n                            weight: 2,\r\n                            fillColor: '#0000ff',\r\n                            fillOpacity: 0.3\r\n                        }}\r\n                    />\r\n                )}\r\n\r\n                {/* Control Panel */}\r\n                <div className=\"control-panel\">\r\n                    <div className=\"control-section\">\r\n                        <h3>Coastal Change Analysis</h3>\r\n                        <DatePicker onDateSelect={handleAnalyze} />\r\n                        \r\n                        {loading && (\r\n                            <div className=\"loading-state\">\r\n                                <div className=\"spinner\"></div>\r\n                                Analyzing Satellite Imagery...\r\n                            </div>\r\n                        )}\r\n\r\n                        {error && (\r\n                            <div className=\"error-state\">\r\n                                ⚠️ {error}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </MapContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MapComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}