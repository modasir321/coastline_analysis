{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\Coastline\\\\frontend\\\\src\\\\MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, ImageOverlay, GeoJSON } from 'react-leaflet';\nimport L from 'leaflet';\nimport * as turf from '@turf/turf';\nimport DatePicker from './DatePicker';\nimport 'leaflet/dist/leaflet.css';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst waterBoundaryStyle = {\n  color: '#00f',\n  weight: 2,\n  fillOpacity: 0\n};\nconst MapComponent = () => {\n  _s();\n  var _mapData$water_bounda, _mapData$water_bounda2;\n  const [mapInstance, setMapInstance] = useState(null);\n  const [mapData, setMapData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [showNDWI, setShowNDWI] = useState(false);\n  const [error, setError] = useState(null);\n  const handleDateSelect = async (startDate, endDate) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:5000/get-map-data', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          start_date: startDate,\n          end_date: endDate\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`Server error: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.error) {\n        throw new Error(data.error);\n      }\n      setMapData(data);\n    } catch (error) {\n      console.error('Error loading imagery:', error);\n      setError(error.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    if (mapInstance && mapData !== null && mapData !== void 0 && mapData.bounds) {\n      const bounds = L.latLngBounds(mapData.bounds);\n      mapInstance.fitBounds(bounds, {\n        padding: [50, 50]\n      });\n    }\n  }, [mapInstance, mapData]);\n  const simplifyGeometry = geometry => {\n    try {\n      return turf.simplify(turf.feature(geometry), {\n        tolerance: 0.001,\n        highQuality: true\n      }).geometry;\n    } catch (e) {\n      console.error('Geometry simplification failed:', e);\n      return geometry;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n      onDateSelect: handleDateSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: showNDWI,\n          onChange: e => setShowNDWI(e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this), \"Show NDWI Analysis\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: \"Loading analysis...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 25\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-overlay\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [46.5107, -63.4168],\n      zoom: 9,\n      style: {\n        height: '600px',\n        width: '100%'\n      },\n      whenCreated: setMapInstance,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 OpenStreetMap contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), (mapData === null || mapData === void 0 ? void 0 : mapData.image_url) && /*#__PURE__*/_jsxDEV(ImageOverlay, {\n        url: mapData.image_url,\n        bounds: mapData.bounds,\n        opacity: 0.8\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 21\n      }, this), showNDWI && (mapData === null || mapData === void 0 ? void 0 : mapData.ndwi_url) && /*#__PURE__*/_jsxDEV(ImageOverlay, {\n        url: mapData.ndwi_url,\n        bounds: mapData.bounds,\n        opacity: 0.6\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }, this), mapData === null || mapData === void 0 ? void 0 : (_mapData$water_bounda = mapData.water_boundary) === null || _mapData$water_bounda === void 0 ? void 0 : (_mapData$water_bounda2 = _mapData$water_bounda.features) === null || _mapData$water_bounda2 === void 0 ? void 0 : _mapData$water_bounda2.map((feature, index) => {\n        try {\n          const simplified = simplifyGeometry(feature.geometry);\n          return /*#__PURE__*/_jsxDEV(GeoJSON, {\n            data: simplified,\n            style: waterBoundaryStyle\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 29\n          }, this);\n        } catch (e) {\n          console.error('Error rendering water boundary:', e);\n          return null;\n        }\n      }), (mapData === null || mapData === void 0 ? void 0 : mapData.geojson) && /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: mapData.geojson,\n        style: {\n          color: '#ff0000',\n          weight: 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(MapComponent, \"3+FJXv83czETwMeeJtiggR4T9nA=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","ImageOverlay","GeoJSON","L","turf","DatePicker","jsxDEV","_jsxDEV","waterBoundaryStyle","color","weight","fillOpacity","MapComponent","_s","_mapData$water_bounda","_mapData$water_bounda2","mapInstance","setMapInstance","mapData","setMapData","loading","setLoading","showNDWI","setShowNDWI","error","setError","handleDateSelect","startDate","endDate","response","fetch","method","headers","body","JSON","stringify","start_date","end_date","ok","Error","status","data","json","console","message","bounds","latLngBounds","fitBounds","padding","simplifyGeometry","geometry","simplify","feature","tolerance","highQuality","e","className","children","onDateSelect","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","target","center","zoom","style","height","width","whenCreated","url","attribution","image_url","opacity","ndwi_url","water_boundary","features","map","index","simplified","geojson","_c","$RefreshReg$"],"sources":["C:/Users/dell/Desktop/Coastline/frontend/src/MapComponent.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, ImageOverlay, GeoJSON } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport * as turf from '@turf/turf';\r\nimport DatePicker from './DatePicker';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport './styles.css';\r\n\r\nconst waterBoundaryStyle = {\r\n    color: '#00f',\r\n    weight: 2,\r\n    fillOpacity: 0\r\n};\r\n\r\nconst MapComponent = () => {\r\n    const [mapInstance, setMapInstance] = useState(null);\r\n    const [mapData, setMapData] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [showNDWI, setShowNDWI] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const handleDateSelect = async (startDate, endDate) => {\r\n        setLoading(true);\r\n        setError(null);\r\n        try {\r\n            const response = await fetch('http://localhost:5000/get-map-data', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ \r\n                    start_date: startDate, \r\n                    end_date: endDate \r\n                })\r\n            });\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(`Server error: ${response.status}`);\r\n            }\r\n            \r\n            const data = await response.json();\r\n            \r\n            if (data.error) {\r\n                throw new Error(data.error);\r\n            }\r\n\r\n            setMapData(data);\r\n        } catch (error) {\r\n            console.error('Error loading imagery:', error);\r\n            setError(error.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (mapInstance && mapData?.bounds) {\r\n            const bounds = L.latLngBounds(mapData.bounds);\r\n            mapInstance.fitBounds(bounds, { padding: [50, 50] });\r\n        }\r\n    }, [mapInstance, mapData]);\r\n\r\n    const simplifyGeometry = (geometry) => {\r\n        try {\r\n            return turf.simplify(turf.feature(geometry), {\r\n                tolerance: 0.001,\r\n                highQuality: true\r\n            }).geometry;\r\n        } catch (e) {\r\n            console.error('Geometry simplification failed:', e);\r\n            return geometry;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"map-container\">\r\n            <DatePicker onDateSelect={handleDateSelect} />\r\n            \r\n            <div className=\"controls\">\r\n                <label>\r\n                    <input \r\n                        type=\"checkbox\" \r\n                        checked={showNDWI}\r\n                        onChange={(e) => setShowNDWI(e.target.checked)}\r\n                    />\r\n                    Show NDWI Analysis\r\n                </label>\r\n            </div>\r\n\r\n            {loading && <div className=\"loading-overlay\">Loading analysis...</div>}\r\n            {error && <div className=\"error-overlay\">{error}</div>}\r\n            \r\n            <MapContainer \r\n                center={[46.5107, -63.4168]}\r\n                zoom={9}\r\n                style={{ height: '600px', width: '100%' }}\r\n                whenCreated={setMapInstance}\r\n            >\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; OpenStreetMap contributors'\r\n                />\r\n                \r\n                {mapData?.image_url && (\r\n                    <ImageOverlay\r\n                        url={mapData.image_url}\r\n                        bounds={mapData.bounds}\r\n                        opacity={0.8}\r\n                    />\r\n                )}\r\n                \r\n                {showNDWI && mapData?.ndwi_url && (\r\n                    <ImageOverlay\r\n                        url={mapData.ndwi_url}\r\n                        bounds={mapData.bounds}\r\n                        opacity={0.6}\r\n                    />\r\n                )}\r\n                \r\n                {mapData?.water_boundary?.features?.map((feature, index) => {\r\n                    try {\r\n                        const simplified = simplifyGeometry(feature.geometry);\r\n                        return (\r\n                            <GeoJSON\r\n                                key={index}\r\n                                data={simplified}\r\n                                style={waterBoundaryStyle}\r\n                            />\r\n                        );\r\n                    } catch (e) {\r\n                        console.error('Error rendering water boundary:', e);\r\n                        return null;\r\n                    }\r\n                })}\r\n                \r\n                {mapData?.geojson && (\r\n                    <GeoJSON \r\n                        data={mapData.geojson}\r\n                        style={{ color: '#ff0000', weight: 2 }}\r\n                    />\r\n                )}\r\n            </MapContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MapComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}