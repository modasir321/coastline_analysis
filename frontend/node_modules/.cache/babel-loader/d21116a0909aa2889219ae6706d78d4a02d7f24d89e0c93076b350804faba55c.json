{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\Coastline\\\\frontend\\\\src\\\\MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, ImageOverlay, GeoJSON } from 'react-leaflet';\nimport L from 'leaflet';\nimport DatePicker from './DatePicker';\nimport 'leaflet/dist/leaflet.css';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = () => {\n  _s();\n  const [mapInstance, setMapInstance] = useState(null);\n  const [mapData, setMapData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const handleDateSelect = async (startDate, endDate) => {\n    setLoading(true);\n    try {\n      const response = await fetchMapData(startDate, endDate);\n      setMapData(response);\n    } catch (error) {\n      console.error('Error loading imagery:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fetchMapData = async (start, end) => {\n    const response = await fetch('http://localhost:5000/get-map-data', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        start_date: start,\n        end_date: end\n      })\n    });\n    return response.json();\n  };\n  useEffect(() => {\n    if (mapInstance && mapData !== null && mapData !== void 0 && mapData.bounds) {\n      const bounds = L.latLngBounds(mapData.bounds);\n      mapInstance.fitBounds(bounds, {\n        padding: [50, 50]\n      });\n    }\n  }, [mapInstance, mapData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n      onDateSelect: handleDateSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: \"Loading imagery...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [46.5107, -63.4168],\n      zoom: 9,\n      style: {\n        height: '600px',\n        width: '100%'\n      },\n      whenCreated: setMapInstance,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 OpenStreetMap contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), (mapData === null || mapData === void 0 ? void 0 : mapData.image_url) && /*#__PURE__*/_jsxDEV(ImageOverlay, {\n        url: mapData.image_url,\n        bounds: mapData.bounds,\n        opacity: 0.8\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this), (mapData === null || mapData === void 0 ? void 0 : mapData.geojson) && /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: mapData.geojson,\n        style: {\n          color: '#ff0000',\n          weight: 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n_s(MapComponent, \"/GsOw5ymMDf7y+7CZzaQaRkHhBU=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","ImageOverlay","GeoJSON","L","DatePicker","jsxDEV","_jsxDEV","MapComponent","_s","mapInstance","setMapInstance","mapData","setMapData","loading","setLoading","handleDateSelect","startDate","endDate","response","fetchMapData","error","console","start","end","fetch","method","headers","body","JSON","stringify","start_date","end_date","json","bounds","latLngBounds","fitBounds","padding","className","children","onDateSelect","fileName","_jsxFileName","lineNumber","columnNumber","center","zoom","style","height","width","whenCreated","url","attribution","image_url","opacity","geojson","data","color","weight","_c","$RefreshReg$"],"sources":["C:/Users/dell/Desktop/Coastline/frontend/src/MapComponent.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, ImageOverlay, GeoJSON } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport DatePicker from './DatePicker';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport './styles.css';\r\n\r\nconst MapComponent = () => {\r\n    const [mapInstance, setMapInstance] = useState(null);\r\n    const [mapData, setMapData] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const handleDateSelect = async (startDate, endDate) => {\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetchMapData(startDate, endDate);\r\n            setMapData(response);\r\n        } catch (error) {\r\n            console.error('Error loading imagery:', error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const fetchMapData = async (start, end) => {\r\n        const response = await fetch('http://localhost:5000/get-map-data', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ start_date: start, end_date: end })\r\n        });\r\n        return response.json();\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (mapInstance && mapData?.bounds) {\r\n            const bounds = L.latLngBounds(mapData.bounds);\r\n            mapInstance.fitBounds(bounds, { padding: [50, 50] });\r\n        }\r\n    }, [mapInstance, mapData]);\r\n\r\n    return (\r\n        <div className=\"map-container\">\r\n            <DatePicker onDateSelect={handleDateSelect} />\r\n            \r\n            {loading && <div className=\"loading-overlay\">Loading imagery...</div>}\r\n            \r\n            <MapContainer \r\n                center={[46.5107, -63.4168]}\r\n                zoom={9}\r\n                style={{ height: '600px', width: '100%' }}\r\n                whenCreated={setMapInstance}\r\n            >\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; OpenStreetMap contributors'\r\n                />\r\n                \r\n                {mapData?.image_url && (\r\n                    <ImageOverlay\r\n                        url={mapData.image_url}\r\n                        bounds={mapData.bounds}\r\n                        opacity={0.8}\r\n                    />\r\n                )}\r\n                \r\n                {mapData?.geojson && (\r\n                    <GeoJSON \r\n                        data={mapData.geojson}\r\n                        style={{ color: '#ff0000', weight: 2 }}\r\n                    />\r\n                )}\r\n            </MapContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MapComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}