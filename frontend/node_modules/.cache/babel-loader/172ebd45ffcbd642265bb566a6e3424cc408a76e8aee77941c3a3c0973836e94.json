{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\Coastline\\\\frontend\\\\src\\\\MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, ImageOverlay, GeoJSON } from 'react-leaflet';\nimport L from 'leaflet';\nimport DatePicker from './DatePicker';\nimport 'leaflet/dist/leaflet.css';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst waterBoundaryStyle = {\n  color: '#00f',\n  weight: 2,\n  fillOpacity: 0\n};\nconst MapComponent = () => {\n  _s();\n  var _mapData$water_bounda, _mapData$water_bounda2;\n  const [mapInstance, setMapInstance] = useState(null);\n  const [mapData, setMapData] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [showNDWI, setShowNDWI] = useState(false);\n  const handleDateSelect = async (startDate, endDate) => {\n    setLoading(true);\n    try {\n      const response = await fetch('http://localhost:5000/get-map-data', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          start_date: startDate,\n          end_date: endDate\n        })\n      });\n      const data = await response.json();\n      setMapData(data);\n    } catch (error) {\n      console.error('Error loading imagery:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    if (mapInstance && mapData !== null && mapData !== void 0 && mapData.bounds) {\n      const bounds = L.latLngBounds(mapData.bounds);\n      mapInstance.fitBounds(bounds, {\n        padding: [50, 50]\n      });\n    }\n  }, [mapInstance, mapData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n      onDateSelect: handleDateSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          checked: showNDWI,\n          onChange: e => setShowNDWI(e.target.checked)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), \"Show NDWI Analysis\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-overlay\",\n      children: \"Loading analysis...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [46.5107, -63.4168],\n      zoom: 9,\n      style: {\n        height: '600px',\n        width: '100%'\n      },\n      whenCreated: setMapInstance,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 OpenStreetMap contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), (mapData === null || mapData === void 0 ? void 0 : mapData.image_url) && /*#__PURE__*/_jsxDEV(ImageOverlay, {\n        url: mapData.image_url,\n        bounds: mapData.bounds,\n        opacity: 0.8\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this), showNDWI && (mapData === null || mapData === void 0 ? void 0 : mapData.ndwi_url) && /*#__PURE__*/_jsxDEV(ImageOverlay, {\n        url: mapData.ndwi_url,\n        bounds: mapData.bounds,\n        opacity: 0.6\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }, this), mapData === null || mapData === void 0 ? void 0 : (_mapData$water_bounda = mapData.water_boundary) === null || _mapData$water_bounda === void 0 ? void 0 : (_mapData$water_bounda2 = _mapData$water_bounda.features) === null || _mapData$water_bounda2 === void 0 ? void 0 : _mapData$water_bounda2.map((feature, index) => /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: feature.geometry,\n        style: waterBoundaryStyle\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this)), (mapData === null || mapData === void 0 ? void 0 : mapData.geojson) && /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: mapData.geojson,\n        style: {\n          color: '#ff0000',\n          weight: 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n};\n_s(MapComponent, \"dbc4mkSdUmlrNnzayNeArhpj5zE=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","ImageOverlay","GeoJSON","L","DatePicker","jsxDEV","_jsxDEV","waterBoundaryStyle","color","weight","fillOpacity","MapComponent","_s","_mapData$water_bounda","_mapData$water_bounda2","mapInstance","setMapInstance","mapData","setMapData","loading","setLoading","showNDWI","setShowNDWI","handleDateSelect","startDate","endDate","response","fetch","method","headers","body","JSON","stringify","start_date","end_date","data","json","error","console","bounds","latLngBounds","fitBounds","padding","className","children","onDateSelect","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","e","target","center","zoom","style","height","width","whenCreated","url","attribution","image_url","opacity","ndwi_url","water_boundary","features","map","feature","index","geometry","geojson","_c","$RefreshReg$"],"sources":["C:/Users/dell/Desktop/Coastline/frontend/src/MapComponent.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, ImageOverlay, GeoJSON } from 'react-leaflet';\r\nimport L from 'leaflet';\r\nimport DatePicker from './DatePicker';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport './styles.css';\r\n\r\nconst waterBoundaryStyle = {\r\n    color: '#00f',\r\n    weight: 2,\r\n    fillOpacity: 0\r\n};\r\n\r\nconst MapComponent = () => {\r\n    const [mapInstance, setMapInstance] = useState(null);\r\n    const [mapData, setMapData] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [showNDWI, setShowNDWI] = useState(false);\r\n\r\n    const handleDateSelect = async (startDate, endDate) => {\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch('http://localhost:5000/get-map-data', {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ \r\n                    start_date: startDate, \r\n                    end_date: endDate \r\n                })\r\n            });\r\n            const data = await response.json();\r\n            setMapData(data);\r\n        } catch (error) {\r\n            console.error('Error loading imagery:', error);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (mapInstance && mapData?.bounds) {\r\n            const bounds = L.latLngBounds(mapData.bounds);\r\n            mapInstance.fitBounds(bounds, { padding: [50, 50] });\r\n        }\r\n    }, [mapInstance, mapData]);\r\n\r\n    return (\r\n        <div className=\"map-container\">\r\n            <DatePicker onDateSelect={handleDateSelect} />\r\n            \r\n            <div className=\"controls\">\r\n                <label>\r\n                    <input \r\n                        type=\"checkbox\" \r\n                        checked={showNDWI}\r\n                        onChange={(e) => setShowNDWI(e.target.checked)}\r\n                    />\r\n                    Show NDWI Analysis\r\n                </label>\r\n            </div>\r\n\r\n            {loading && <div className=\"loading-overlay\">Loading analysis...</div>}\r\n            \r\n            <MapContainer \r\n                center={[46.5107, -63.4168]}\r\n                zoom={9}\r\n                style={{ height: '600px', width: '100%' }}\r\n                whenCreated={setMapInstance}\r\n            >\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; OpenStreetMap contributors'\r\n                />\r\n                \r\n                {mapData?.image_url && (\r\n                    <ImageOverlay\r\n                        url={mapData.image_url}\r\n                        bounds={mapData.bounds}\r\n                        opacity={0.8}\r\n                    />\r\n                )}\r\n                \r\n                {showNDWI && mapData?.ndwi_url && (\r\n                    <ImageOverlay\r\n                        url={mapData.ndwi_url}\r\n                        bounds={mapData.bounds}\r\n                        opacity={0.6}\r\n                    />\r\n                )}\r\n                \r\n                {mapData?.water_boundary?.features?.map((feature, index) => (\r\n                    <GeoJSON\r\n                        key={index}\r\n                        data={feature.geometry}\r\n                        style={waterBoundaryStyle}\r\n                    />\r\n                ))}\r\n                \r\n                {mapData?.geojson && (\r\n                    <GeoJSON \r\n                        data={mapData.geojson}\r\n                        style={{ color: '#ff0000', weight: 2 }}\r\n                    />\r\n                )}\r\n            </MapContainer>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MapComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}