{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dell\\\\Desktop\\\\Coastline\\\\coastline_analysis\\\\frontend\\\\src\\\\MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\nimport axios from 'axios';\nimport * as turf from '@turf/turf';\nimport DatePicker from './DatePicker';\nimport 'leaflet/dist/leaflet.css';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = () => {\n  _s();\n  const [mapData, setMapData] = useState({\n    baseline: null,\n    current: null\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [showBaseline, setShowBaseline] = useState(true);\n  const simplifyGeometry = geojson => {\n    if (!geojson) return null;\n    try {\n      return turf.simplify(geojson, {\n        tolerance: 0.001,\n        highQuality: true\n      });\n    } catch (e) {\n      console.error(\"Simplification error:\", e);\n      return geojson;\n    }\n  };\n  const handleDateSelect = async endDate => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await axios.post('http://localhost:5000/get-map-data', {\n        end_date: endDate\n      });\n      setMapData({\n        baseline: simplifyGeometry(response.data.baseline),\n        current: simplifyGeometry(response.data.current),\n        erosion: simplifyGeometry(response.data.erosion),\n        accretion: simplifyGeometry(response.data.accretion)\n      });\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const message = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || \"Analysis failed. Try a smaller area or different dates.\";\n      setError(message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const renderGeoJSON = (data, style) => {\n    if (!data) return null;\n    return /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: data,\n      style: style\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 16\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: [/*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [46.5107, -63.4168],\n      zoom: 10,\n      style: {\n        height: '100vh',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 OpenStreetMap contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), showBaseline && renderGeoJSON(mapData.baseline, {\n        color: '#ff0000',\n        weight: 2\n      }), renderGeoJSON(mapData.current, {\n        color: '#0000ff',\n        weight: 2\n      }), renderGeoJSON(mapData.erosion, {\n        color: '#ff0000',\n        weight: 3,\n        dashArray: '5,5'\n      }), renderGeoJSON(mapData.accretion, {\n        color: '#00ff00',\n        weight: 3,\n        dashArray: '5,5'\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-panel\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"control-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Controls\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-item\",\n          children: /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: showBaseline,\n              onChange: e => setShowBaseline(e.target.checked)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 29\n            }, this), \"Show 2000 Coastline\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"control-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Analysis Period\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n            onDateSelect: handleDateSelect\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }, this), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"loading-status\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Processing coastal changes...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"note\",\n            children: \"Complex areas may take longer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 25\n        }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error-message\",\n          children: [\"\\u26A0\\uFE0F Analysis Failed\", /*#__PURE__*/_jsxDEV(\"p\", {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setError(null),\n            children: \"Dismiss\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(MapComponent, \"BKMacGIte3+HEEBPskACJC+zNfM=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useState","MapContainer","TileLayer","GeoJSON","axios","turf","DatePicker","jsxDEV","_jsxDEV","MapComponent","_s","mapData","setMapData","baseline","current","loading","setLoading","error","setError","showBaseline","setShowBaseline","simplifyGeometry","geojson","simplify","tolerance","highQuality","e","console","handleDateSelect","endDate","response","post","end_date","data","erosion","accretion","_error$response","_error$response$data","message","renderGeoJSON","style","fileName","_jsxFileName","lineNumber","columnNumber","className","children","center","zoom","height","width","url","attribution","color","weight","dashArray","type","checked","onChange","target","onDateSelect","onClick","_c","$RefreshReg$"],"sources":["C:/Users/dell/Desktop/Coastline/coastline_analysis/frontend/src/MapComponent.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\r\nimport axios from 'axios';\r\nimport * as turf from '@turf/turf';\r\nimport DatePicker from './DatePicker';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport './styles.css';\r\n\r\nconst MapComponent = () => {\r\n    const [mapData, setMapData] = useState({ baseline: null, current: null });\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [showBaseline, setShowBaseline] = useState(true);\r\n\r\n    const simplifyGeometry = (geojson) => {\r\n        if (!geojson) return null;\r\n        try {\r\n            return turf.simplify(geojson, {\r\n                tolerance: 0.001,\r\n                highQuality: true\r\n            });\r\n        } catch (e) {\r\n            console.error(\"Simplification error:\", e);\r\n            return geojson;\r\n        }\r\n    };\r\n\r\n    const handleDateSelect = async (endDate) => {\r\n        setLoading(true);\r\n        setError(null);\r\n        try {\r\n            const response = await axios.post('http://localhost:5000/get-map-data', {\r\n                end_date: endDate\r\n            });\r\n\r\n            setMapData({\r\n                baseline: simplifyGeometry(response.data.baseline),\r\n                current: simplifyGeometry(response.data.current),\r\n                erosion: simplifyGeometry(response.data.erosion),\r\n                accretion: simplifyGeometry(response.data.accretion)\r\n            });\r\n\r\n        } catch (error) {\r\n            const message = error.response?.data?.error || \r\n                          \"Analysis failed. Try a smaller area or different dates.\";\r\n            setError(message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const renderGeoJSON = (data, style) => {\r\n        if (!data) return null;\r\n        return <GeoJSON data={data} style={style} />;\r\n    };\r\n\r\n    return (\r\n        <div className=\"map-container\">\r\n            <MapContainer \r\n                center={[46.5107, -63.4168]}\r\n                zoom={10}\r\n                style={{ height: '100vh', width: '100%' }}\r\n            >\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; OpenStreetMap contributors'\r\n                />\r\n\r\n                {showBaseline && renderGeoJSON(mapData.baseline, \r\n                    { color: '#ff0000', weight: 2 })}\r\n                \r\n                {renderGeoJSON(mapData.current, \r\n                    { color: '#0000ff', weight: 2 })}\r\n                \r\n                {renderGeoJSON(mapData.erosion, \r\n                    { color: '#ff0000', weight: 3, dashArray: '5,5' })}\r\n                \r\n                {renderGeoJSON(mapData.accretion, \r\n                    { color: '#00ff00', weight: 3, dashArray: '5,5' })}\r\n\r\n            </MapContainer>\r\n\r\n            <div className=\"control-panel\">\r\n                <div className=\"control-group\">\r\n                    <h3>Controls</h3>\r\n                    \r\n                    <div className=\"control-item\">\r\n                        <label>\r\n                            <input\r\n                                type=\"checkbox\"\r\n                                checked={showBaseline}\r\n                                onChange={(e) => setShowBaseline(e.target.checked)}\r\n                            />\r\n                            Show 2000 Coastline\r\n                        </label>\r\n                    </div>\r\n\r\n                    <div className=\"control-item\">\r\n                        <h4>Analysis Period</h4>\r\n                        <DatePicker onDateSelect={handleDateSelect} />\r\n                    </div>\r\n\r\n                    {loading && (\r\n                        <div className=\"loading-status\">\r\n                            <div className=\"spinner\"></div>\r\n                            <p>Processing coastal changes...</p>\r\n                            <p className=\"note\">Complex areas may take longer</p>\r\n                        </div>\r\n                    )}\r\n\r\n                    {error && (\r\n                        <div className=\"error-message\">\r\n                            ⚠️ Analysis Failed\r\n                            <p>{error}</p>\r\n                            <button onClick={() => setError(null)}>Dismiss</button>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MapComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}